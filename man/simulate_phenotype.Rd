% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_phenotype.R
\name{simulate_phenotype}
\alias{simulate_phenotype}
\title{Simulate Complex Phenotypes with Controlled Confounding}
\usage{
simulate_phenotype(
  causal_genotypes,
  heritability,
  alpha = -1,
  phenotype = "quantitative",
  prevalence = NULL,
  liab_dist = "auto",
  n_annot_cols = 6,
  categorical_confounder = NULL,
  categorical_confounder_variance = 0.1,
  genetic_confounder_coeff = NULL,
  genetic_confounder_rel_var = NULL,
  genetic_confounder_cor = NULL,
  ancestry_component = NULL,
  ancestry_confounder_coeff = NULL,
  ancestry_confounder_rel_var = NULL,
  ancestry_confounder_cor = NULL
)
}
\arguments{
\item{causal_genotypes}{A data frame of causal genotypes. The first \code{n_annot_cols} columns must contain variant annotations, followed by \eqn{N} columns for each sample's alternate allele dosage. By default, \code{n_annot_cols} is 6, which corresponds to the output by \code{phenocause::sample_causal_sites()}.}

\item{heritability}{The target narrow-sense heritability (\eqn{h^2}) of the trait. A numeric value between 0 and 1.}

\item{alpha}{A numeric parameter modeling the relationship between MAF and variant effect size, as defined in the LDAK model. Default is -1, which corresponds to the GCTA model where all variants are assumed to explain the same amount of genetic variance.}

\item{phenotype}{The type of phenotype to simulate. Either \code{"quantitative"} (default) or \code{"binary"}.}

\item{prevalence}{The phenotype prevalence for binary traits. Required if \code{phenotype = "binary"}.}

\item{liab_dist}{The liability distribution model for binary traits. One of \code{"auto"} (default), \code{"gaussian"}, or \code{"empirical"}. If \code{"auto"}, it uses \code{"empirical"} when a categorical confounder is present, otherwise \code{"gaussian"}.}

\item{n_annot_cols}{The number of initial annotation columns in \code{causal_genotypes} to separate from the genotype matrix. Default is 5.}

\item{categorical_confounder}{A \code{character} (for nominal) or \code{factor} (for ordinal) vector representing a categorical confounder. Must have length \eqn{N}.}

\item{categorical_confounder_variance}{The variance explained by the categorical confounder's effect.}

\item{genetic_confounder_coeff}{The linear effect coefficient (\eqn{\gamma_{gc}}). All three \verb{genetic_confounder_*} parameters must be provided together, or all must be \code{NULL}.}

\item{genetic_confounder_rel_var}{The variance of the genetic confounding effect relative to the genetic variance (\eqn{w_{gc}}).}

\item{genetic_confounder_cor}{The correlation (\eqn{\rho_{gc}}) between the genetic effect \eqn{G} and the confounder \eqn{X_{gc}}.}

\item{ancestry_component}{A numeric vector representing an ancestry component (\eqn{Q}). All four \verb{ancestry_confounder_*} parameters must be provided together, or all must be \code{NULL}.}

\item{ancestry_confounder_coeff}{The linear effect coefficient (\eqn{\gamma_{ac}}).}

\item{ancestry_confounder_rel_var}{The variance of the ancestry confounding effect relative to the genetic variance (\eqn{w_{ac}}).}

\item{ancestry_confounder_cor}{The correlation (\eqn{\rho_{ac}}) between the ancestry component \eqn{Q} and the confounder \eqn{X_{ac}}.}
}
\value{
A list containing three data frames providing a complete record of the simulation:
\describe{
\item{\code{phenotypes}}{A data frame with one row per sample, containing the final phenotypes and all their constituent components.}
\item{\code{confounders}}{A data frame containing the simulated values of the underlying confounding variables.}
\item{\code{coefficients}}{A data frame detailing the coefficients used to generate the confounding effects.}
}
}
\description{
Implements a simulation framework to generate phenotypes under various genetic architectures. The primary purpose is to formally model and generate data where the conflation between population structure and environmental confounding—a pervasive issue in human genetics research—can be explicitly controlled and studied. For this purpose, the function implements several distinct, additive confounding models.
}
\details{
The simulation is structured around a flexible, additive model. All confounder effects are optional and are added to a base genetic model.

\strong{1. Simulation framework}

The function first simulates a quantitative trait (\eqn{Y_{q}}) as a sum of a genetic component (\eqn{G}), one or more optional confounding effects (\eqn{P_{k}}), and a random residual error (\eqn{E}):
\deqn{Y_{q} = G + \sum_{k} P_{k} + E}
For binary outcomes, this quantitative trait is treated as an underlying, unobserved \strong{liability}. A threshold is applied to this liability based on the desired prevalence to generate a binary case/control phenotype.

\strong{2. The base genetic model}

The genetic component \eqn{G} is the aggregate effect of \eqn{M} causal variants. The effect size \eqn{\beta_{j}} for variant \eqn{j} is drawn from a normal distribution where the variance is scaled by the variant's allele frequency \eqn{p_{j}} and a user-defined parameter, \eqn{\alpha}:
\deqn{\beta_{j} \sim \mathcal{N}(0, [2p_{j}(1-p_{j})]^{\alpha})}
The total genetic effect for an individual \eqn{i} is the sum of their dosage-weighted effects: \eqn{G_{i} = \sum_{j=1}^{M} g_{ij}\beta_{j}}. The residual error \eqn{E} is drawn from \eqn{\mathcal{N}(0, \sigma^{2}_{E})}, where the variance \eqn{\sigma^{2}_{E}} is calculated to satisfy the target heritability (\eqn{h^2}).

\strong{3. Confounding models}

The framework can simulate three distinct types of confounding effects that are added to the base model. They can be used in any combination.

\strong{3.1. Categorical confounder}

This models an observable categorical variable that influences the phenotype. The implementation distinguishes between nominal and ordinal confounders based on the data type of the input vector:
\itemize{
\item \strong{Nominal (input is \code{character})}: Each category is assigned an independent, random effect. This is suitable for variables without inherent order, such as country of birth.
\item \strong{Ordinal (input is \code{factor})}: The effects are simulated to be monotonically increasing across the defined factor levels. This is suitable for variables with a natural order, such as educational attainment (\verb{"High School" < "Bachelors" < "PhD"}) or socioeconomic status.
}

\strong{3.2. Non-specific genetic confounder}

This models a quantitative confounder \eqn{X_{gc}} that is correlated with the total genetic effect \eqn{G}. Its effect on the phenotype is \eqn{P_{gc} = \gamma_{gc} X_{gc}}. The simulation is governed by:
\itemize{
\item \code{genetic_confounder_coeff} (\eqn{\gamma_{gc}}): The linear effect of the confounder on the phenotype.
\item \code{genetic_confounder_rel_var} (\eqn{w_{gc} = \frac{Var(P_{gc})}{Var(G)}}): The variance of the genetic confounding effect relative to the genetic variance.
\item \code{genetic_confounder_cor} (\eqn{\rho_{gc} = Cor(G, X_{gc})}): The correlation between the genetic effect and the confounder.
}
The underlying confounder \eqn{X_{gc}} is simulated as \eqn{X_{gc} = b_{gc} G + E_{gc}}, where the coefficient \eqn{b_{gc} = \rho_{gc} \sqrt{w_{gc}} / |\gamma_{gc}|} is derived from the parameters.

\strong{3.3. Ancestry-specific confounder}

This models a quantitative confounder \eqn{X_{ac}} that is correlated with a specific axis of genetic ancestry \eqn{Q}. Its effect is \eqn{P_{ac} = \gamma_{ac} X_{ac}}. The simulation is governed by:
\itemize{
\item \code{ancestry_component} (\eqn{Q}): The vector of ancestry component values for each individual.
\item \code{ancestry_confounder_coeff} (\eqn{\gamma_{ac}}): The linear effect of the confounder on the phenotype.
\item \code{ancestry_confounder_rel_var} (\eqn{w_{ac} = \frac{Var(P_{ac})}{Var(G)}}): The variance of the ancestry confounding effect relative to the genetic variance.
\item \code{ancestry_confounder_cor} (\eqn{\rho_{ac} = Cor(Q, X_{ac})}): The correlation between the ancestry component and the confounder.
}
The underlying confounder \eqn{X_{ac}} is simulated as \eqn{X_{ac} = b_{ac} Q + E_{ac}}, where \eqn{b_{ac} = \frac{\rho_{ac} \sqrt{w_{ac}} SD(G)}{|\gamma_{ac}| SD(Q)}}.

\strong{4. Liability threshold model for binary traits}

For binary traits, a case/control status is determined by applying a threshold to the quantitative liability score \eqn{Y_q}. Two methods are available:
\itemize{
\item \strong{\code{gaussian}}: Assumes the liability \eqn{Y_q} follows a normal distribution and uses \code{qnorm()} to find the threshold corresponding to the target prevalence. This is appropriate when the liability is expected to be unimodal and symmetric.
\item \strong{\code{empirical}}: Uses the empirical cumulative distribution function (\code{quantile()}) of the simulated liability scores to find the threshold. This method is robust to non-normality and is \strong{strongly recommended} when using categorical confounders, as they can introduce multimodality into the liability distribution.
}
}
\examples{
\dontrun{
##=====================================================
## Example 1: Basic quantitative trait simulation
##=====================================================
## 1. We will first sample the causal sites from a GDS (Genomic Data Structure) file
# using the phenocause::sample_causal_sites() function.
# Note: To create a GDS file from a VCF file, see SeqArray::seqVCF2GDS 
# Get path  to the example GDS files:
gds_paths <- system.file(
  paste0("extdata/example.chr", 1:3, ".gds"), package = "phenocause"
)
set.seed(123)
# Sample the causal sites. The output will be with two data frames.
n_causal_sites <- 200 ## Define number of causal sites
uniform_sites <- sample_causal_sites(
  gds_paths = gds_paths,
  n_causal_sites = n_causal_sites,
  n_threads = 2
)
 causal_geno_df <- uniform_sites$causal_genotypes 

## 2. Simulate phenotype
target_h2 <- 0.6
sim_basic <- simulate_phenotype(
  causal_genotypes = causal_geno_df,
  heritability = target_h2,
  n_annot_cols = 6 ## Number of metadata columns in causal_geno_df
)

# 3. Check output
observed_h2 <- var(sim_basic$phenotypes$g) / (var(sim_basic$phenotypes$g) + var(sim_basic$phenotypes$residual))
cat(sprintf("Target h2: \%.3f | Observed h2: \%.3f\n", target_h2, observed_h2))

##===========================================================
## Example 2: Confounder correlated with polygenic score (g)
##===========================================================
set.seed(456)
## Goal: To simulate a trait caused by both genetic and non-genetic effects, where the non-genetic
# variable `X_gc` is correlated with the polygenic score `g`.
# Specifically, we will assume the model:
# Y = mu + g + P_gc + e =  mu + (X_causal_sites * beta_causal_sites) + (X_gc * genetic_confounder_coeff) + e
# Where Y is the phenotype, g=(X_causal_sites * beta_causal_sites) is the vector of total genetic effects
# And X_gc is a confounding variable correlated with g, such that:
# Cor(g, X_gc) = genetic_confounder_cor,
# And: Var(X_gc*genetic_confounder_coeff)/Var(g) = genetic_confounder_rel_var is the variance caused 
# by the confounder relative to the genetic variance.
# where  `genetic_confounder_cor`, `genetic_confounder_coeff` and `genetic_confounder_rel_var` are user-defined parameters.
 
## 1. Define the parameters of the confounding effects
target_g_cor <- 0.7 ## Cor(g, X_gc) 
target_confounder_rel_var <- 0.2 

sim_genetic_conf <- simulate_phenotype(
  causal_genotypes = causal_geno_df, ## reuse genotype data from Example 1
  heritability = 0.5,
  n_annot_cols = 6,
  genetic_confounder_coeff = 0.5,
  genetic_confounder_cor = target_g_cor,
  genetic_confounder_rel_var = target_confounder_rel_var
)

# 2. Check output
g <- sim_genetic_conf$phenotypes$g
p_genetic_confounder <- sim_genetic_conf$phenotypes$p_genetic_confounder
x_genetic_confounder <- sim_genetic_conf$confounders$X_genetic_confounder ## Simulated confounder variable

observed_g_cor <- cor(g, x_genetic_confounder)
observed_g_rel_var <- var(p_genetic_confounder) / var(g)

cat(sprintf(
  "Target Cor(G, X_gc): \%.3f | Observed: \%.3f\n", target_g_cor, observed_g_cor
))
cat(sprintf(
  "Target Var(P_gc)/Var(G): \%.3f | Observed: \%.3f\n", target_confounder_rel_var, observed_g_rel_var
))

##====================================================================
## Example 3: Confounder correlated with a specific ancestry component
##====================================================================
set.seed(789)
## Goal: To simulate a trait influenced by a confounding variable that
# is correlated with a specific ancestry componen (e.g. PC1, EUR \% ancestry, etc.).
# The model is simular as in example 2, except that now the confounder is correlated 
# with a specific ancestry component (also see `Details`):
# Y = mu + g + P_ac + e =  mu + (X_causal_sites * beta_causal_sites) + (X_ac * ancestry_confounder_coeff) + e
# Use PCs from metadata:
data(phenocause.metadata) ## Load metadata
pc1 <- phenocause.metadata$PC1

# 2. Simulate phenotype with an ancestry-correlated confounder
target_anc_cor <- 0.8 ## Cor(g, X_ac)
target_anc_rel_var <- 0.15 ## Var(P_ac)/Var(g)

sim_anc_conf <- simulate_phenotype(
  causal_genotypes = causal_geno_df, ## reuse data from Example 1.
  heritability = 0.5,
  n_annot_cols = 6,
  ancestry_component = pc1,
  ancestry_confounder_coeff = 0.6,
  ancestry_confounder_cor = target_anc_cor,
  ancestry_confounder_rel_var = target_anc_rel_var
)

# 3. Check output
g_anc <- sim_anc_conf$phenotypes$g
p_ancestry_confounder <- sim_anc_conf$phenotypes$p_ancestry_confounder
x_ancestry_confounder <- sim_anc_conf$confounders$X_ancestry_confounder

observed_anc_cor <- cor(pc1, x_ancestry_confounder)
observed_anc_rel_var <- var(p_ancestry_confounder) / var(g_anc)

cat(sprintf(
  "Target Cor(Q, X_ac): \%.3f | Observed: \%.3f\n", target_anc_cor, observed_anc_cor
))
cat(sprintf(
  "Target Var(P_ac)/Var(G): \%.3f | Observed: \%.3f\n", target_anc_rel_var, observed_anc_rel_var
))


##==========================================================
## Example 4: Binary trait with three different forms of
## confounding (30 replicates)
##==========================================================
library(ggplot2)
library(patchwork)
set.seed(1024)

# 1. Define parameters 
target_prev <- 0.15 ## Prevalence of the binary trait.
n_replicates <- 30        ## Number of simulation replicates

# Define a categorical confounder:
categorical_confounder <- as.character(phenocause.metadata$population) 
# Note: If `categorical_confounder` is of class "character", it will be
# treated as a nominal-scale variable. If it is of class factor,
# it will be treated as an ordinal-scale variable, with monotonically-increasing
# values for the categories as they appear in `levels(categorical_confounder)`.
# This can be useful to simulate confounding by, e.g., socio-economic status, 
# educational attainment, etc.

# 2. Run simulation across replicates
rep_results <- replicate(n_replicates, {
  sim_full <- simulate_phenotype(
    causal_genotypes =  causal_geno_df, ## reuse data from example 1
    heritability = 0.4,
    phenotype = "binary",
    prevalence = target_prev,
    liab_dist = "empirical", # Recommended when using categorical confounders
    n_annot_cols = 6,
    # Confounder 1: Categorical
    categorical_confounder = categorical_confounder,
    categorical_confounder_variance = 0.05,
    # Confounder 2: Ancestry-correlated:
    ancestry_component = pc1,    ## Defined in example 3
    ancestry_confounder_coeff = 0.5,
    ancestry_confounder_rel_var = 0.1,
    ancestry_confounder_cor = 0.6,
    # Confounder 3: PGS-correlated:
    genetic_confounder_coeff = -0.4,
    genetic_confounder_rel_var = 0.1,
    genetic_confounder_cor = -0.5
  )
  # Return a named vector of key metrics for this replicate
  c(
    obs_prev = mean(sim_full$phenotypes$y_binary),
    obs_h2 = var(sim_full$phenotypes$g) / (var(sim_full$phenotypes$g) + var(sim_full$phenotypes$residual)),
    obs_anc_cor = cor(pc1, sim_full$confounders$X_ancestry),
    obs_anc_rel_var = var(sim_full$phenotypes$p_ancestry) / var(sim_full$phenotypes$g)
  )
}, simplify = FALSE)

results_df <- as.data.frame(do.call(rbind, rep_results))

# 3. Summarize and check results
print(summary(results_df))

# 4. Plot distributions of observed metrics vs. targets
p1 <- ggplot(results_df, aes(y = obs_prev)) +
  geom_boxplot() +
  geom_hline(yintercept = target_prev, color = "red", linetype = "dashed") +
  labs(title = "Prevalence", y = "Observed", x = "") +
  coord_flip()

p2 <- ggplot(results_df, aes(y = obs_h2)) +
  geom_boxplot() +
  geom_hline(yintercept = 0.4, color = "red", linetype = "dashed") +
  labs(title = "Heritability", y = "Observed", x = "") +
  coord_flip()

p3 <- ggplot(results_df, aes(y = obs_anc_cor)) +
  geom_boxplot() +
  geom_hline(yintercept = 0.6, color = "red", linetype = "dashed") +
  labs(title = "Cor(Q, X_ac)", y = "Observed", x = "") +
  coord_flip()

p4 <- ggplot(results_df, aes(y = obs_anc_rel_var)) +
  geom_boxplot() +
  geom_hline(yintercept = 0.1, color = "red", linetype = "dashed") +
  labs(title = "Var(P_ac)/Var(G)", y = "Observed", x = "") +
  coord_flip()

# Combine plots
(p1 | p2) / (p3 | p4) + plot_annotation(title = "Simulation metrics across 30 replicates")
}

}
\references{
Speed, D., Hemani, G., Johnson, M.R. et al. Improved heritability estimation from genome-wide SNPs. Am J Hum Genet 91, 1011–1021 (2012).
}
