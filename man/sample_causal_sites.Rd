% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample_causal_sites.R
\name{sample_causal_sites}
\alias{sample_causal_sites}
\title{Sample Causal Genetic Variants}
\usage{
sample_causal_sites(
  gds_paths,
  n_causal_sites,
  ldak_ld_weights_paths = NULL,
  sampling_weights_paths = NULL,
  ldak_chrs = NULL,
  stabilize_sampling_weights = TRUE,
  weights_power = 1,
  missingness_threshold = NULL,
  mac_threshold = NULL,
  n_threads = 1
)
}
\arguments{
\item{gds_paths}{A character vector of paths to the GDS files. When \code{length > 1}, each file is expected to contain data for a single chromosome.}

\item{n_causal_sites}{A single positive integer specifying the total number of causal sites to sample across all GDS files.}

\item{ldak_ld_weights_paths}{A character vector of paths to LDAK weights files. The file must have either two
or three columns.
\itemize{
\item Two-columns files: Raw (no header) *.short output file by \code{ldak --calc-weights}. The columns are \code{rsid} and \code{weight}.
\item Three-columns files: File with a header, containing columns \code{chr} \code{rsid} and \code{weight} (case-insensitive).
See \code{ldak_chrs} for how chromosome information is handled for 2-column files. Cannot be used with \code{sampling_weights_paths}.
}}

\item{sampling_weights_paths}{A character vector of paths to custom sampling weight files. Files must have a header and contain mandatory columns (case-insensitive): \code{chr}, \code{pos}, and \code{weight}. The columns \code{rsid}, \code{ref}, and \code{alt} are optional; a warning is issued if they are missing.}

\item{ldak_chrs}{A character vector used to assign chromosomes to the files specified in \code{ldak_ld_weights_paths}. This is required only when the LDAK files are in the standard 2-column format (rsid, weight) AND the number of LDAK weight files does not match the number of GDS files. Its length must match \code{length(ldak_ld_weights_paths)}. It is ignored if the LDAK files are in a 3-column format with a 'chr' column header.}

\item{stabilize_sampling_weights}{A logical flag. If \code{TRUE} (default), a small constant (10^-6) is added to all weights to prevent zero-probability sampling.}

\item{weights_power}{A numeric value used to raise the sampling weights to a power. Default is 1. For LDAK weights, consider \code{weights_power = -0.25} to enrich for variants in high-LD regions, or \code{weights_power = 0.25} for low-LD regions.}

\item{missingness_threshold}{A numeric value between 0 and 1. Variants with a missingness rate greater than this threshold will be excluded before sampling. Default is \code{NULL}.}

\item{mac_threshold}{A positive integer. Variants with a minor allele count (MAC) less than this threshold will be excluded before sampling. Default is \code{NULL}.}

\item{n_threads}{A positive integer specifying the number of threads for parallel operations on GDS files. Default is 1.}
}
\value{
A list containing two data frames:
\describe{
\item{\code{causal_annotation}}{A data frame with annotations for each of the \code{n_causal_sites} sampled variants.}
\item{\code{causal_genotypes}}{A data frame with \code{n_causal_sites} rows and \code{(k + N)} columns, where \code{k} is the number of annotation columns and \code{N} is the number of samples. It contains the genotypes and annotations for the causal variants.}
}
}
\description{
Samples a specified number of causal variants from a set of GDS files. The function operates in one of three modes: uniform sampling, or weighted sampling based on LDAK or custom user-provided weights. It can filter sites by missingness or minor allele count (MAC) before sampling and returns the genotypes and annotations of the selected variants.
}
\details{
The sampling mode is determined automatically based on the provided arguments:
\itemize{
\item \strong{uniform}: Default mode. Triggered if neither \code{ldak_ld_weights_paths} nor \code{sampling_weights_paths} is provided. Variants are sampled uniformly at random from the pool of available sites after filtering.
\item \strong{ldak_weights}: Triggered by providing paths in \code{ldak_ld_weights_paths}. Requires chromosome information to be provided either within the files or via the \code{ldak_chrs} parameter.
\item \strong{custom_weights}: Triggered by providing paths in \code{sampling_weights_paths}. Variants are sampled according to user-defined weights from files containing mandatory \code{chr}, \code{pos}, and \code{weight} columns.
}
The function robustly handles cases where the number of GDS files and weight files do not match, under the condition that one of the inputs is a single, consolidated file (e.g., one GDS file for all chromosomes, or one weight file for all chromosomes).

The join between weights/annotations and genotypes is performed using a robust composite key (\code{chr}, \code{pos}, \code{ref}, \code{alt}) to ensure correctness.
}
\examples{
\dontrun{
# Ensure required packages and package data are available for the examples
if (!requireNamespace("data.table", quietly = TRUE) ||
    !requireNamespace("SeqArray", quietly = TRUE)) {
  stop("Please install data.table and SeqArray to run these examples.")
}

##================================================================
## Example 1: Uniform sampling of causal sites
##================================================================
cat(">>> Running Example 1: Uniform Sampling\n")
gds_paths <- system.file(
  paste0("extdata/example.chr", 1:3, ".gds"), package = "phenocause"
)
n_causal_total <- 200
uniform_sites <- sample_causal_sites(
  gds_paths = gds_paths,
  n_causal_sites = n_causal_total,
  n_threads = 2
)
stopifnot(nrow(uniform_sites$causal_genotypes) == n_causal_total)
cat("OK: Uniform sampling returned the correct number of sites.\n")

##================================================================
## Example 2: Weighted sampling with a custom weights file
##================================================================
cat(">>> Running Example 2: Custom Weights File\n")
gds_paths <- system.file(
  paste0("extdata/example.chr", 1:3, ".gds"), package = "phenocause"
)

# Create temporary custom weight files
tmp_custom_files <- sapply(1:3, function(chr_idx) {
  tmp_file <- tempfile(fileext = ".tsv")
  gds <- SeqArray::seqOpen(gds_paths[chr_idx])
  on.exit(SeqArray::seqClose(gds))
  custom_weights_df <- data.frame(
    chr = SeqArray::seqGetData(gds, "chromosome"),
    pos = SeqArray::seqGetData(gds, "position"),
    rsid = SeqArray::seqGetData(gds, "annotation/id"),
    ref = SeqArray::seqGetData(gds, "$ref"),
    alt = SeqArray::seqGetData(gds, "$alt"),
    weight = runif(SeqArray::seqSummary(gds)$num.variant, 1, 100)
  )
  data.table::fwrite(custom_weights_df, file = tmp_file, sep = "\t")
  return(tmp_file)
})

n_causal_custom <- 50
custom_sites <- sample_causal_sites(
  gds_paths = gds_paths,
  n_causal_sites = n_causal_custom,
  sampling_weights_paths = tmp_custom_files
)

stopifnot(nrow(custom_sites$causal_genotypes) == n_causal_custom)
cat("OK: Custom weighted sampling returned the correct number of sites.\n")
file.remove(tmp_custom_files)

##================================================================
## Example 3: Weighted sampling using LDAK weights and the `ldak_chrs` parameter
##================================================================
cat(">>> Running Example 3: LDAK Weights from R Object")
data(phenocause.ldak_weights)
temp_dir <- tempdir()
# Create standard 2-column LDAK weight files (no header)
temp_ldak_paths <- sapply(names(phenocause.ldak_weights), function(chr_name) {
  file_path <- file.path(temp_dir, paste0(chr_name, ".weights.short"))
  data.table::fwrite(
    phenocause.ldak_weights[[chr_name]],
    file = file_path, sep = " ", col.names = FALSE
  )
  return(file_path)
})

n_causal_ldak <- 300
# Since the files have no 'chr' column, we must supply it via `ldak_chrs`
ldak_sites <- sample_causal_sites(
  gds_paths = gds_paths,
  n_causal_sites = n_causal_ldak,
  ldak_ld_weights_paths = temp_ldak_paths,
  ldak_chrs = c("1", "2", "3"), # Must correspond to the files
  n_threads = 2
)
stopifnot(nrow(ldak_sites$causal_genotypes) == n_causal_ldak)
cat("OK: LDAK weighted sampling returned the correct number of sites.\n")
file.remove(temp_ldak_paths)
}
}
